{"version":3,"sources":["components/GetGenreDetails.jsx","components/GetGenre.jsx","components/HeaderSlider.jsx","components/MyList.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","gridList","GetGenreDetails","id","useState","MyGenreDetailsData","setMyGenreDetailsData","shouldRender","setShouldRender","useEffect","requesrURL","axios","get","then","repos","allRepos","data","results","classes","className","style","GridList","cols","length","map","tile","GridListTile","src","backdrop_path","onClick","mylist","JSON","parse","localStorage","getItem","someData","original_title","push","filter","ele","ind","findIndex","elem","setItem","stringify","allAPICalls","fetchAllData","message","alt","GridListTileBar","title","GetGenre","props","GenreList","post","name","defaultProps","HeaderSlider","SliderList","Carousel","Item","Caption","transform","MyList","isHovered","setHover","MyListData","onMouseOver","onMouseLeave","image","Button","size","position","top","right","variant","index","x","splice","deleteMylist","App","setGenreList","setSliderList","MyListn","setMyList","a","fetch","GenreListAPIResponse","json","GenreListAPIResponseJSON","SliderDataAPIurlResponse","SliderDataAPIurlResponseJSON","genres","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e108a126.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport axios from 'axios'\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap'\r\n    }\r\n}));\r\n\r\nfunction GetGenreDetails(id) {\r\n    const [MyGenreDetailsData, setMyGenreDetailsData] = useState([]);\r\n    const [shouldRender, setShouldRender] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const requesrURL = 'https://api.themoviedb.org/3/discover/movie?api_key=9be5962f75cabd26c04eb4443674e0d2&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&with_genres=' + id.MyGenreDetailsData;\r\n        axios.get(requesrURL)\r\n            .then((repos) => {\r\n                const allRepos = repos.data;\r\n                setMyGenreDetailsData(allRepos.results)\r\n            }).then(\r\n                data => {\r\n                    setShouldRender(true);\r\n                });\r\n    }, []);\r\n\r\n    const message = (data) => {\r\n        var mylist = JSON.parse(localStorage.getItem('mylist'));\r\n        if (mylist == null) { mylist = [] }\r\n        var someData =\r\n        {\r\n            'id': data.id,\r\n            'image': \"https://image.tmdb.org/t/p/w500/\" + data.backdrop_path,\r\n            'name': data.original_title\r\n        };\r\n        mylist.push(someData);\r\n        mylist = mylist.filter((ele, ind) => ind === mylist.findIndex(elem => elem.id === ele.id))\r\n        localStorage.setItem('mylist', JSON.stringify(mylist));\r\n        id.allAPICalls.fetchAllData();\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            {\r\n                shouldRender && <div >\r\n                    <div className={classes.root} style={{ overflow: \"hidden\"}}>\r\n                        <GridList className={classes.gridList} cols={5}>\r\n                            {MyGenreDetailsData && MyGenreDetailsData.length ? MyGenreDetailsData.map((tile) => (\r\n                                <GridListTile key={tile.id}>\r\n                                    <img src={'https://image.tmdb.org/t/p/w500/' + tile.backdrop_path} onClick={() => { message(tile) }}\r\n                                        alt={tile.original_title} />\r\n                                    <GridListTileBar\r\n                                        title={tile.original_title}\r\n                                    />\r\n                                </GridListTile>\r\n                            )) : ''}\r\n                        </GridList>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GetGenreDetails","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport GetGenreDetails from './GetGenreDetails'\r\n\r\nGetGenre.propTypes = {\r\n    GenreList: propTypes.array,\r\n};\r\n\r\nGetGenre.defaultProps = {\r\n    GenreList: [],\r\n};\r\n\r\nfunction GetGenre(props) {\r\n    const { GenreList } = props;\r\n    if (GenreList) {\r\n        return (\r\n            <>\r\n                {GenreList.map(post => (\r\n                    <div className='container-fluid'>\r\n                        <h3 style={{ 'padding': \"10px\" }} style={{ 'padding-top': \"30px\" }} key={post.id}>{post.name}</h3>\r\n                        <GetGenreDetails allAPICalls={props.allAPICalls} MyGenreDetailsData={post.id} />\r\n                    </div>\r\n                ))}\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetGenre","import React from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport propTypes from 'prop-types';\r\n\r\nHeaderSlider.propTypes = {\r\n    SliderList: propTypes.array,\r\n};\r\n\r\nHeaderSlider.defaultProps = {\r\n    SliderList: [],\r\n};\r\n\r\nfunction HeaderSlider(props) {\r\n    const { SliderList } = props;\r\n    if (SliderList) {\r\n        return (\r\n            <div>\r\n                <div className='container-fluid' >\r\n                    <Carousel>\r\n                        {SliderList.map(post => (\r\n                            <Carousel.Item key={post.id} style={{ 'height': \"300px\" }} >\r\n                                <div>\r\n                                    <img style={{ 'height': \"300px\" }}\r\n                                        className=\"d-block w-100\" alt={post.original_title}\r\n                                        src={'https://image.tmdb.org/t/p/w500/' + post.backdrop_path} />\r\n                                    <Carousel.Caption>\r\n                                        <h3 >{post.original_title}</h3>\r\n                                    </Carousel.Caption>\r\n                                </div>\r\n                            </Carousel.Item>\r\n                        ))}\r\n                    </Carousel>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nHeaderSlider.propTypes = {\r\n\r\n}\r\n\r\nexport default HeaderSlider\r\n\r\n","import React, { useState } from 'react'\r\nimport propTypes from 'prop-types';\r\nimport { Button } from \"react-bootstrap\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'left',\r\n        overflow: 'hidden',\r\n    },\r\n    gridList: {\r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)'\r\n    }\r\n}));\r\n\r\nMyList.propTypes = {\r\n    MyListData: propTypes.array,\r\n};\r\n\r\nMyList.defaultProps = {\r\n    MyListData: [],\r\n};\r\n\r\nfunction MyList(props) {\r\n    const deleteMylist = (data) => {\r\n        var mylist = JSON.parse(localStorage.getItem('mylist'));\r\n        var index = mylist.findIndex(x => x.id === data.id);\r\n        if (index !== -1) {\r\n            mylist.splice(index, 1);\r\n        }\r\n        localStorage.setItem('mylist', JSON.stringify(mylist));\r\n        props.allAPICalls.fetchAllData();\r\n    }\r\n    const [isHovered, setHover] = useState(false);\r\n    const { MyListData } = props;\r\n    const classes = useStyles();\r\n    if (MyListData.length > 0) {\r\n        return (\r\n            <div className='container-fluid'>\r\n                <h3 style={{ 'padding': \"10px\" }} style={{ 'padding-top': \"30px\" }}>My List</h3>\r\n                <div className={classes.root, 'hellow'} style={{ overflow: \"hidden\" }}>\r\n                    <>\r\n                        <GridList className={classes.gridList} cols={5}>\r\n                            {MyListData.map((tile) => (\r\n                                <GridListTile className='imageContainer' key={tile.id} onMouseOver={() => setHover(true)}\r\n                                    onMouseLeave={() => setHover(false)} >\r\n                                    <img src={tile.image} alt={tile.name} />\r\n                                    {isHovered && (\r\n                                        <Button size=\"sm\"\r\n                                            style={{\r\n                                                position: \"absolute\",\r\n                                                top: \"5px\",\r\n                                                right: \"5px\",\r\n                                            }} variant=\"danger\" onClick={() => { deleteMylist(tile) }}>\r\n                                            Delete\r\n                                        </Button>\r\n                                    )}\r\n                                    <GridListTileBar\r\n                                        title={tile.name}\r\n                                    />\r\n                                </GridListTile>\r\n                            ))}\r\n                        </GridList>\r\n                    </>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className='container-fluid'>\r\n                <h3 style={{ 'padding': \"10px\" }} style={{ 'padding-top': \"30px\" }}>Nothing here! Scroll to discover more</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyList\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport GetGenre from './components/GetGenre';\nimport HeaderSlider from './components/HeaderSlider';\nimport MyList from './components/MyList';\n\nfunction App() {\n\n  const [GenreList, setGenreList] = useState([]);\n  const [SliderList, setSliderList] = useState([]);\n  const [MyListn, setMyList] = useState([]);\n  var allAPICalls = {\n    fetchAllData: async () => {\n      const GenreListAPIurl = 'https://api.themoviedb.org/3/genre/movie/list?api_key=9be5962f75cabd26c04eb4443674e0d2&language=en-US';\n      const GenreListAPIResponse = await fetch(GenreListAPIurl);\n      const GenreListAPIResponseJSON = await GenreListAPIResponse.json();\n      setGenreList(GenreListAPIResponseJSON);\n      \n      const SliderDataAPIurl = 'https://api.themoviedb.org/3/discover/movie?api_key=9be5962f75cabd26c04eb4443674e0d2&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&with_genres=10752';\n      const SliderDataAPIurlResponse = await fetch(SliderDataAPIurl);\n      const SliderDataAPIurlResponseJSON = await SliderDataAPIurlResponse.json();\n      setSliderList(SliderDataAPIurlResponseJSON);\n\n      var MyListData = JSON.parse(localStorage.getItem('mylist'));\n      if (MyListData == null) { MyListData = [] }\n      setMyList(MyListData);\n    }\n  };\n\n  useEffect(() => {\n    allAPICalls.fetchAllData();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <HeaderSlider SliderList={SliderList.results} />\n      <MyList allAPICalls={allAPICalls} MyListData={MyListn} />\n      <GetGenre allAPICalls={allAPICalls} GenreList={GenreList.genres} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \n\nReactDOM.render(<App />,document.getElementById('root')\n);"],"sourceRoot":""}